name: Build, Test and Release
# Limit main to one build at a time to prevent any race conditions
concurrency: main

on:
  push:
    branches:
      - main

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.version.outputs.changes }} # map step output to job output
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Enable node
        uses: actions/setup-node@main
        with:
          node-version: 20.x

      # This step will run changeset version, setting the step output to if there were changesets found
      - name: Version command
        id: version
        run: |
          npm install --no-package-lock --no-save @changesets/cli
          echo ::set-output name=changes::$(npx changeset version 2>&1 | grep -q 'No unreleased changesets found' && echo 'false' || echo 'true')
      - name: Push changes
        if: steps.version.outputs.changes == 'true'
        run: |
          git config user.email "rafael.gonzalez.1737@gmail.com"
          git config user.name "Rafael Gonzalez"
          git add -A
          git commit -m "Version packages" || echo "No changes to commit"
          git push
  build:
    runs-on: ubuntu-latest
    needs: version
    # This will only run if there were no changesets.
    ## the next triggered build from the push will then pass this step and continue with the release
    if: always() && needs.version.outputs.changes == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Enable node
        uses: actions/setup-node@main
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
          scope: '@<scope>'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Release packages
        uses: changesets/action@main
        with:
          publish: pnpx changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
